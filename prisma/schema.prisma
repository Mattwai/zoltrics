generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                 String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId             String    @db.Uuid
  providerType       String
  providerId         String
  providerAccountId  String
  refreshToken       String?
  accessToken        String?
  accessTokenExpires DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  user               User      @relation(fields: [userId], references: [id])

  @@unique([providerId, providerAccountId])
}

model Session {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String   @db.Uuid
  expires      DateTime
  sessionToken String   @unique
  accessToken  String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id])
}

model User {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email         String    @unique
  name          String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  emailVerified DateTime?
  stripeId      String?
  
  // Relations
  accounts                Account[]
  subscription            Billings?
  sessions                Session[]
  userProfile            UserProfile?
  userBusinessProfile    UserBusinessProfile?
  userSettings           UserSettings?
  domains                Domain[]
  filterQuestions        FilterQuestions[]
  helpdesk               HelpDesk[]
  knowledgeBase          KnowledgeBase[]
  campaign               Campaign[]
  chatBot                ChatBot?
  customTimeSlots        CustomTimeSlot[]
  blockedDates           BlockedDate[]
  products               Product[]
  customers              Customer[]
  chatRooms              ChatRoom[]
  chatMessages           ChatMessage[]
  bookings               Booking[]

  @@index([email])
  @@index([createdAt])
}

model UserProfile {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @unique @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserBusinessProfile {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @unique @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  businessName  String?
  bookingLink   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model UserSettings {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId        String    @unique @db.Uuid
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingCalendarSettings BookingCalendarSettings?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model VerificationRequest {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Domain {
  id       String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name     String
  userId   String?    @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  customer Customer[]
  User     User?      @relation(fields: [userId], references: [id], onDelete: Cascade)
  products Product[]
  Campaign Campaign[] @relation("CampaignToDomain")
  settings DomainSettings?

  @@index([name])
  @@index([userId])
}

model DomainSettings {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  domainId  String   @unique @db.Uuid
  domain    Domain   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([domainId])
}

model ChatBot {
  id             String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  welcomeMessage String?
  background     String?
  textColor      String?
  helpdesk       Boolean @default(false)
  userId         String? @unique @db.Uuid
  User           User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Billings {
  id      String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  plan    Plans   @default(STANDARD)
  credits Int     @default(10)
  userId  String? @unique @db.Uuid
  User    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpDesk {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answer   String
  userId   String? @db.Uuid
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  title     String
  content   String
  type      KnowledgeType @default(ARTICLE)
  category  String?
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([category])
  @@index([createdAt])
}

model FilterQuestions {
  id       String  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question String
  answered String?
  userId   String? @db.Uuid
  User     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CustomerResponses {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  question   String
  answered   String?
  customerId String   @db.Uuid
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
}

model Customer {
  id        String              @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email     String?             @unique
  domainId  String?             @db.Uuid
  userId    String?             @db.Uuid
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  
  // Relations
  booking   Booking[]
  chatRoom  ChatRoom[]
  Domain    Domain?             @relation(fields: [domainId], references: [id], onDelete: Cascade)
  User      User?               @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions CustomerResponses[]
  campaigns CampaignCustomer[]

  @@index([email])
  @@index([domainId])
  @@index([userId])
  @@index([createdAt])
}

model ChatRoom {
  id         String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  customerId String?       @db.Uuid
  userId     String?       @db.Uuid
  createdAt  DateTime      @default(now())
  updatedAt  DateTime      @updatedAt
  
  // Relations
  Customer   Customer?     @relation(fields: [customerId], references: [id], onDelete: Cascade)
  User       User?         @relation(fields: [userId], references: [id], onDelete: Cascade)
  message    ChatMessage[]
  status     ChatRoomStatus?

  @@index([customerId])
  @@index([userId])
  @@index([createdAt])
}

model ChatRoomStatus {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  chatRoomId String   @unique @db.Uuid
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  live       Boolean  @default(false)
  mailed     Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([chatRoomId])
}

model ChatMessage {
  id         String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  message    String
  role       Role?
  chatRoomId String?   @db.Uuid
  userId     String?   @db.Uuid
  seen       Boolean   @default(false)
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  
  // Relations
  ChatRoom   ChatRoom? @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  User       User?     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([userId])
  @@index([createdAt])
  @@index([seen])
}

model Booking {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  date            DateTime
  slot            String
  email           String
  name            String
  customerId      String?   @db.Uuid
  domainId        String?   @db.Uuid
  productId       String?   @db.Uuid
  userId          String?   @db.Uuid
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  
  // Relations
  Customer        Customer? @relation(fields: [customerId], references: [id], onDelete: Cascade)
  Product         Product?  @relation(fields: [productId], references: [id])
  User            User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingMetadata BookingMetadata?
  bookingPayment  BookingPayment?

  @@index([date])
  @@index([email])
  @@index([customerId])
  @@index([domainId])
  @@index([productId])
  @@index([userId])
}

model BookingMetadata {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId       String    @unique @db.Uuid
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  source          String?   @default("direct_link")
  no_show         Boolean   @default(false)
  riskScore       Float?
  googleUserId    String?   @db.Uuid
  isAuthenticated Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model BookingPayment {
  id              String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId       String    @unique @db.Uuid
  booking         Booking   @relation(fields: [bookingId], references: [id], onDelete: Cascade)
  depositRequired Boolean   @default(false)
  depositPaid     Boolean   @default(false)
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
}

model Campaign {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  template  String?
  userId    String?  @db.Uuid
  createdAt DateTime @default(now())
  User      User?    @relation(fields: [userId], references: [id], onDelete: Cascade)
  domain    Domain[] @relation("CampaignToDomain")
  customers CampaignCustomer[]

  @@index([userId])
  @@index([createdAt])
}

model CampaignCustomer {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  campaignId String   @db.Uuid
  customerId String   @db.Uuid
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)
  createdAt  DateTime @default(now())

  @@unique([campaignId, customerId])
  @@index([campaignId])
  @@index([customerId])
}

model Product {
  id        String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name      String
  userId    String?   @db.Uuid
  domainId  String?   @db.Uuid
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  // Relations
  User      User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  Domain    Domain?   @relation(fields: [domainId], references: [id], onDelete: Cascade)
  bookings  Booking[]
  pricing   ProductPricing?
  status    ProductStatus?

  @@index([userId])
  @@index([domainId])
  @@index([createdAt])
}

model ProductPricing {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @unique @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  price     Int
  currency  String   @default("USD")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
}

model ProductStatus {
  id        String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  productId String   @unique @db.Uuid
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  isLive    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([productId])
  @@index([isLive])
}

model BookingCalendarSettings {
  id            String   @id @default(uuid()) @db.Uuid
  userId        String   @unique @db.Uuid
  availableDays String[]
  timeSlots     Json
  startDate     DateTime
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userSettings  UserSettings @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("booking_calendar_settings")
}

model CustomTimeSlot {
  id             String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String   @db.Uuid
  date           DateTime
  startTime      String
  endTime        String
  duration       Int
  maxSlots       Int
  overrideRegular Boolean  @default(false)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id])

  @@index([userId, date])
  @@index([date])
  @@index([createdAt])
}

model BlockedDate {
  id        String   @id @default(cuid())
  userId    String   @db.Uuid
  date      DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, date])
  @@index([userId, date])
  @@index([userId])
  @@index([date])
}

enum Plans {
  STANDARD
  PROFESSIONAL
  BUSINESS
}

enum Role {
  user
  assistant
}

enum KnowledgeType {
  ARTICLE
  FAQ
  HELP
}
