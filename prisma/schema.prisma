generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String   @id @default(uuid()) @db.Uuid
  userId            String   @db.Uuid
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(uuid()) @db.Uuid
  sessionToken String   @unique
  userId       String   @db.Uuid
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id                  String               @id @default(uuid()) @db.Uuid
  name                String?
  email               String               @unique
  emailVerified       DateTime?
  image               String?
  password            String?
  stripeId            String?
  role                Role                 @default(USER)
  createdAt           DateTime             @default(now())
  updatedAt           DateTime             @updatedAt
  accounts            Account[]
  subscription        Billings?
  blockedDates        BlockedDate[]
  bookings            Booking[]
  campaigns           Campaign[]
  chatBot             ChatBot?
  chatMessages        ChatMessage[]
  chatRooms           ChatRoom[]
  customTimeSlots     CustomTimeSlot[]
  customers           Customer[]
  domains             Domain[]
  filterQuestions     FilterQuestions[]
  helpdesk            HelpDesk[]
  knowledgeBase       KnowledgeBase[]
  services            Service[]
  sessions            Session[]
  userBusinessProfile UserBusinessProfile?
  userProfile         UserProfile?
  userSettings        UserSettings?

  @@index([email])
}

model UserProfile {
  id        String   @id @default(uuid()) @db.Uuid
  userId    String   @unique @db.Uuid
  bio       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model UserBusinessProfile {
  id           String       @id @default(uuid()) @db.Uuid
  userId       String       @unique @db.Uuid
  businessName String?
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  bookingLink  BookingLink?
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BookingLink {
  id                    String              @id @default(uuid()) @db.Uuid
  link                  String              @unique @default(dbgenerated("gen_random_uuid()")) @db.VarChar(255)
  userBusinessProfileId String              @unique @db.Uuid
  createdAt             DateTime            @default(now())
  updatedAt             DateTime            @updatedAt
  userBusinessProfile   UserBusinessProfile @relation(fields: [userBusinessProfileId], references: [id], onDelete: Cascade)

  @@index([link])
  @@index([userBusinessProfileId])
}

model UserSettings {
  id                      String                   @id @default(uuid()) @db.Uuid
  userId                  String                   @unique @db.Uuid
  theme                   String?
  notifications           Boolean                  @default(true)
  createdAt               DateTime                 @default(now())
  updatedAt               DateTime                 @updatedAt
  bookingCalendarSettings BookingCalendarSettings?
  user                    User                     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model VerificationRequest {
  id         String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  identifier String
  token      String   @unique
  expires    DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, token])
}

model Domain {
  id        String     @id @default(uuid()) @db.Uuid
  name      String
  userId    String     @db.Uuid
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  customers Customer[]
  user      User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  services  Service[]
  campaigns Campaign[] @relation("CampaignToDomain")

  @@index([userId])
}

model Service {
  id          String          @id @default(uuid()) @db.Uuid
  name        String
  domainId    String          @db.Uuid
  userId      String          @db.Uuid
  duration    Int             @default(60)         // Duration in minutes
  isMultiDay  Boolean         @default(false)      // Whether service can span multiple days
  minDays     Int?                                 // Minimum days required (for multi-day services)
  maxDays     Int?                                 // Maximum days allowed (for multi-day services)
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  bookings    Booking[]
  domain      Domain          @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user        User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  pricing     ServicePricing?
  status      ServiceStatus?

  @@index([domainId])
  @@index([userId])
}

model ServicePricing {
  id        String   @id @default(uuid()) @db.Uuid
  price     Float
  currency  String   @default("NZD")
  serviceId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
}

model ServiceStatus {
  id        String   @id @default(uuid()) @db.Uuid
  isLive    Boolean  @default(false)
  serviceId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  service   Service  @relation(fields: [serviceId], references: [id], onDelete: Cascade)

  @@index([serviceId])
}

model ChatBot {
  id             String   @id @default(uuid()) @db.Uuid
  name           String
  welcomeMessage String?
  background     String?
  textColor      String?
  helpdesk       Boolean  @default(false)
  userId         String   @unique @db.Uuid
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  user           User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Billings {
  id      String  @id @default(uuid()) @db.Uuid
  plan    String?
  credits Int     @default(0)
  userId  String? @unique @db.Uuid
  user    User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model HelpDesk {
  id       String  @id @default(uuid()) @db.Uuid
  question String
  answer   String
  userId   String? @db.Uuid
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model KnowledgeBase {
  id        String   @id @default(uuid()) @db.Uuid
  title     String
  content   String
  category  String?
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model FilterQuestions {
  id       String  @id @default(uuid()) @db.Uuid
  question String
  answer   String? @default("")
  userId   String  @db.Uuid
  user     User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model CustomerResponses {
  id         String   @id @default(uuid()) @db.Uuid
  question   String
  answer     String
  customerId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([customerId])
}

model Customer {
  id        String              @id @default(uuid()) @db.Uuid
  name      String
  email     String
  phone     String?
  domainId  String              @db.Uuid
  userId    String              @db.Uuid
  createdAt DateTime            @default(now())
  updatedAt DateTime            @updatedAt
  bookings  Booking[]
  campaigns CampaignCustomer[]
  chatRooms ChatRoom[]
  domain    Domain              @relation(fields: [domainId], references: [id], onDelete: Cascade)
  user      User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  questions CustomerResponses[]

  @@unique([email, userId])
  @@index([domainId])
  @@index([userId])
  @@index([email])
}

model ChatRoom {
  id         String          @id @default(uuid()) @db.Uuid
  name       String
  customerId String?         @db.Uuid
  userId     String?         @db.Uuid
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  message    ChatMessage[]
  customer   Customer?       @relation(fields: [customerId], references: [id], onDelete: Cascade)
  user       User?           @relation(fields: [userId], references: [id], onDelete: Cascade)
  status     ChatRoomStatus?

  @@index([customerId])
  @@index([userId])
}

model ChatRoomStatus {
  id         String   @id @default(uuid()) @db.Uuid
  isOpen     Boolean  @default(true)
  chatRoomId String   @unique @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
}

model ChatMessage {
  id         String   @id @default(uuid()) @db.Uuid
  content    String
  chatRoomId String   @db.Uuid
  userId     String?  @db.Uuid
  seen       Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  chatRoom   ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)
  user       User?    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([chatRoomId])
  @@index([userId])
}

model Booking {
  id              String           @id @default(uuid()) @db.Uuid
  startTime       DateTime
  endTime         DateTime
  status          String           @default("pending")
  customerId      String?          @db.Uuid
  serviceId       String?          @db.Uuid
  userId          String?          @db.Uuid
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  customer        Customer?        @relation(fields: [customerId], references: [id], onDelete: Cascade)
  service         Service?         @relation(fields: [serviceId], references: [id])
  user            User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  bookingMetadata BookingMetadata?
  bookingPayment  BookingPayment?

  @@index([customerId])
  @@index([serviceId])
  @@index([userId])
}

model BookingMetadata {
  id        String   @id @default(uuid()) @db.Uuid
  notes     String?
  bookingId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model BookingPayment {
  id        String   @id @default(uuid()) @db.Uuid
  amount    Float
  currency  String
  status    String
  bookingId String   @unique @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  booking   Booking  @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@index([bookingId])
}

model Campaign {
  id        String             @id @default(uuid()) @db.Uuid
  name      String
  userId    String             @db.Uuid
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)
  customers CampaignCustomer[]
  domains   Domain[]           @relation("CampaignToDomain")

  @@index([userId])
}

model CampaignCustomer {
  id         String   @id @default(uuid()) @db.Uuid
  campaignId String   @db.Uuid
  customerId String   @db.Uuid
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  campaign   Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
  customer   Customer @relation(fields: [customerId], references: [id], onDelete: Cascade)

  @@index([campaignId])
  @@index([customerId])
}

model BookingCalendarSettings {
  id             String       @id @default(uuid()) @db.Uuid
  userSettingsId String       @unique @db.Uuid
  timeZone       String?
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  userSettings   UserSettings @relation(fields: [userSettingsId], references: [id], onDelete: Cascade)

  @@index([userSettingsId])
}

model CustomTimeSlot {
  id        String   @id @default(uuid()) @db.Uuid
  startTime DateTime
  endTime   DateTime
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model BlockedDate {
  id        String   @id @default(uuid()) @db.Uuid
  date      DateTime
  userId    String   @db.Uuid
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Invitation {
  id        String           @id @default(uuid()) @db.Uuid
  email     String
  name      String?
  company   String?
  token     String           @unique
  status    InvitationStatus @default(PENDING)
  role      Role             @default(USER)
  expiresAt DateTime
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([email])
  @@index([token])
}

enum Plans {
  STANDARD
  PROFESSIONAL
  BUSINESS
}

enum Role {
  ADMIN
  USER
  ASSISTANT
}

enum KnowledgeType {
  ARTICLE
  FAQ
  HELP
}

enum InvitationStatus {
  PENDING
  ACCEPTED
  EXPIRED
}
